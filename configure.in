dnl configure.in for libdht
AC_INIT(dht_bits.c)

AM_INIT_AUTOMAKE(libdht,0.1)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

dnl Initialize prefix.
if test "$prefix" = "NONE"; then
   prefix="/usr/local"
fi

dnl Checks for programs.
AC_PROG_CC_C_O
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_LIBTOOL

AC_PROG_GCC_TRADITIONAL
if test "$GCC" = yes ; then
        CFLAGS="$CFLAGS -Wall"
fi

dnl Check for endianness
AC_C_BIGENDIAN(AC_DEFINE(HAVE_BIG_ENDIAN, 1,
		[Define if architecture is big endian]),,)

dnl Checks for libraries.
AC_CHECK_LIB(socket, socket)

dnl Checks for libcrypto
AC_MSG_CHECKING(for libcrypto)
AC_ARG_WITH(libcrypto,
[  --with-libcrypto=DIR      use libcrypto in DIR],
[ case "$withval" in
  yes|no)
     AC_MSG_RESULT(no)
     ;;
  *)
     AC_MSG_RESULT($withval)
     if test -f $withval/include/ssl/sha.h -a -f $withval/libcrypto.a; then
        owd=`pwd`
        if cd $withval; then withval=`pwd`; cd $owd; fi
	SSLINC="-I$withval/include"
	SSLLIB="-L$withval -lcrypto"
     elif test -f $withval/include/ssl/sha.h -a \
	       -f $withval/lib/libcrypto.a; then
	owd=`pwd`
	if cd $withval; then withval=`pwd`; cd $owd; fi
	SSLINC="-I$withval/include"
	SSLLIB="-L$withval/lib -lcrypto"
     elif test -f $withval/include/openssl/sha.h -a -f $withval/libcrypto.a; then
        owd=`pwd`
        if cd $withval; then withval=`pwd`; cd $owd; fi
	SSLINC="-I$withval/include"
	SSLLIB="-L$withval -lcrypto"
     elif test -f $withval/include/openssl/sha.h -a \
	       -f $withval/lib/libcrypto.a; then
	owd=`pwd`
	if cd $withval; then withval=`pwd`; cd $owd; fi
	SSLINC="-I$withval/include"
	SSLLIB="-L$withval/lib -lcrypto"
     else
        AC_ERROR(sha.h or libcrypto.a not found in $withval)
     fi
     ;;
  esac ],
[ if test -f ${prefix}/include/ssl/sha.h; then
     SSLINC="-I${prefix}/include"
     SSLLIB="-L${prefix}/lib -lcrypto"
  elif test -f ${prefix}/include/openssl/sha.h; then
     SSLINC="-I${prefix}/include"
     SSLLIB="-L${prefix}/lib -lcrypto"
  elif test -f ${prefix}/ssl/include/openssl/sha.h; then
     SSLINC="-I${prefix}/ssl/include"
     SSLLIB="-L${prefix}/ssl/lib -lcrypto"
  elif test -f /usr/include/ssl/sha.h; then
     SSLLIB="-lcrypto"
  else
     AC_MSG_RESULT(no)
     AC_ERROR(libcrypto not found)
  fi
  AC_MSG_RESULT(yes)
]
)
AC_SUBST(SSLINC)
AC_SUBST(SSLLIB)

dnl Checks for (installed) libdnet
AC_ARG_WITH(libdnet,
[  --with-libdnet=DIR      use libdnet in DIR],
[ case "$withval" in
  yes|no)
     AC_ERROR([Please specify directory containing dnet-config when using --with-libdnet])
     ;;
  *)
     AC_MSG_CHECKING(for libdnet)
     AC_MSG_RESULT($withval)
     if test -f $withval/src/libdnet.a; then
	DNETINC="-I$withval/include"
	DNETLIB="-L$withval/src -ldnet `$withval/dnet-config --libs`"
     elif test -x $withval/bin/dnet-config; then
	DNETINC="`$withval/bin/dnet-config --cflags`"
	DNETLIB="`$withval/bin/dnet-config --libs`"
     else
        AC_MSG_RESULT(no)
        AC_ERROR(dnet-config not found in $withval/bin)
     fi
     ;;
  esac
  AC_MSG_RESULT(yes) ],
[ dnl This is the default case so let's just use AC_PATH_PROG! --CPK.
  AC_PATH_PROG(dnetconfig, dnet-config, "no")
  if test "$dnetconfig" = "no"; then
     AC_ERROR(dnet-config not found)
  else
     DNETINC="`$dnetconfig --cflags`"
     DNETLIB="`$dnetconfig --libs`"
  fi]
)

dnl We still need to check whether it's dnet or dumbnet as
dnl for example on Debian. We test by looking at the content
dnl of DNETLIB and derive from the library name what version
dnl we're dealing with. If we find a libdumbnet, we prefix
dnl compat/libdnet to our inclusion path. It provides a dnet.h
dnl that transparently includes dumbnet.h for those systems. --CPK.
AC_MSG_CHECKING([whether libdnet is a libdumbnet])
if test `echo $DNETLIB | sed -e '/dumb/=;d'`; then
     AC_MSG_RESULT(yes)
     AC_DEFINE(HAVE_DUMBNET, 1,
		[Define if our libdnet is a libdumbnet])
     DNETCOMPAT="compat/libdnet"
else
     AC_MSG_RESULT(no)
fi

AC_SUBST(DNETCOMPAT)
AC_SUBST(DNETINC)
AC_SUBST(DNETLIB)

dnl Checks for libevent
AC_MSG_CHECKING(for libevent)
AC_ARG_WITH(libevent,
[  --with-libevent=DIR     use libevent build directory],
[ case "$withval" in
  yes|no)
     AC_MSG_RESULT(no)
     ;;
  *)
     AC_MSG_RESULT($withval)
     if test -f $withval/event.h -a -f $withval/libevent.a; then
        owd=`pwd`
        if cd $withval; then withval=`pwd`; cd $owd; fi
        EVENTINC="-I$withval"
        EVENTLIB="-L$withval -levent"
     elif test -f $withval/include/event.h -a -f $withval/lib/libevent.a; then
        owd=`pwd`
        if cd $withval; then withval=`pwd`; cd $owd; fi
	EVENTINC="-I$withval/include"
	EVENTLIB="-L$withval/lib -levent"
     else
        AC_ERROR(event.h or libevent.a not found in $withval)
     fi
     ;;
  esac ],
[ if test -f ${prefix}/include/event.h; then
     EVENTINC="-I${prefix}/include"
     EVENTLIB="-L${prefix}/lib -levent"
  elif test -f /usr/include/event/event.h; then
     EVENTINC="-I/usr/include/event"
     EVENTLIB="-levent"
  elif test -f /usr/include/event.h; then
     EVENTLIB="-levent"
  else
     AC_MSG_RESULT(no)
     AC_ERROR(libevent not found)
  fi
  AC_MSG_RESULT(yes) ]
)
AC_SUBST(EVENTINC)
AC_SUBST(EVENTLIB)

dnl zlib is required
ZLIB="-lz"
AC_ARG_WITH(zlib,
        [  --with-zlib=DIR        Use zlib in DIR],
        [
                if test "x$withval" = "xno" ; then
                        AC_MSG_ERROR([zlib is required])
                fi
                if test -d "$withval/lib"; then
                        ZLIB="-L${withval}/lib"
                else
                        ZLIB="-L${withval}"
                fi
                if test -d "$withval/include"; then
                        ZINC="-I${withval}/include"
                else
                        ZINC="-I${withval}"
                fi
        ]
)
AC_SUBST(ZLIB)
AC_SUBST(ZINC)

LIBS=$ZLIB
CFLAGS=$ZINC
AC_CHECK_LIB(z, deflate,, AC_MSG_ERROR([zlib ismissing - you need to install it]))
LIBS=""
CFLAGS=""

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h stdarg.h inttypes.h stdint.h signal.h unistd.h sys/time.h sys/queue.h sys/ioctl.h)
if test "x$ac_cv_header_sys_queue_h" = "xyes"; then
	AC_MSG_CHECKING(for TAILQ_FOREACH in sys/queue.h)
	AC_EGREP_CPP(yes,
[
#include <sys/queue.h>
#ifdef TAILQ_FOREACH
 yes
#endif
],	[AC_MSG_RESULT(yes)
	 AC_DEFINE(HAVE_TAILQFOREACH, 1,
		[Define if TAILQ_FOREACH is defined in <sys/queue.h>])],
	AC_MSG_RESULT(no)
	)
fi

if test "x$ac_cv_header_sys_time_h" = "xyes"; then
	AC_MSG_CHECKING(for timeradd in sys/time.h)
	AC_EGREP_CPP(yes,
[
#include <sys/time.h>
#ifdef timeradd
 yes
#endif
],	[ AC_DEFINE(HAVE_TIMERADD, 1,
		[Define if timeradd is defined in <sys/time.h>])
	  AC_MSG_RESULT(yes)] ,AC_MSG_RESULT(no)
)
fi

if test "x$ac_cv_header_sys_time_h" = "xyes"; then
	AC_MSG_CHECKING(for timercmp in sys/time.h)
	AC_EGREP_CPP(yes,
[
#include <sys/time.h>
#ifdef timercmp
 yes
#endif
],	[ AC_DEFINE(HAVE_TIMERCMP, 1,
		[Define if timercmp is defined in <sys/time.h>])
	  AC_MSG_RESULT(yes)] ,AC_MSG_RESULT(no)
)
fi

if test "x$ac_cv_header_sys_time_h" = "xyes"; then
	AC_MSG_CHECKING(for timerclear in sys/time.h)
	AC_EGREP_CPP(yes,
[
#include <sys/time.h>
#ifdef timerclear
 yes
#endif
],	[ AC_DEFINE(HAVE_TIMERCLEAR, 1,
		[Define if timerclear is defined in <sys/time.h>])
	  AC_MSG_RESULT(yes)] ,AC_MSG_RESULT(no)
)
fi

if test "x$ac_cv_header_sys_time_h" = "xyes"; then
	AC_MSG_CHECKING(for timerisset in sys/time.h)
	AC_EGREP_CPP(yes,
[
#include <sys/time.h>
#ifdef timerisset
 yes
#endif
],	[ AC_DEFINE(HAVE_TIMERISSET, 1,
		[Define if timerisset is defined in <sys/time.h>])
	  AC_MSG_RESULT(yes)] ,AC_MSG_RESULT(no)
)
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_HEADER_TIME

dnl Checks for library functions.
AC_REPLACE_FUNCS(strlcpy arc4random)
AC_CHECK_FUNCS(gettimeofday vasprintf fcntl fgetln issetugid)
needsha1=no
AC_CHECK_FUNCS(SHA1Update, , [needsha1=yes])
if test $needsha1 = yes; then
   AC_LIBOBJ(sha1)
fi

AC_MSG_CHECKING(for F_SETFD in fcntl.h)
AC_EGREP_CPP(yes,
[
#define _GNU_SOURCE
#include <fcntl.h>
#ifdef F_SETFD
yes
#endif
],	[ AC_DEFINE(HAVE_SETFD, 1,
	      [Define if F_SETFD is defined in <fcntl.h>])
	  AC_MSG_RESULT(yes) ], AC_MSG_RESULT(no))

AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_CHECK_TYPE(u_int64_t, unsigned long long)
AC_CHECK_TYPE(u_int32_t, unsigned int)
AC_CHECK_TYPE(u_int16_t, unsigned short)
AC_CHECK_TYPE(u_int8_t, unsigned char)

AC_MSG_CHECKING([for sin_len])
AC_TRY_COMPILE([
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <netinet/in.h>],
  [struct sockaddr_in sin; sin.sin_len = 1;],
  [AC_MSG_RESULT([yes])
   AC_DEFINE(HAVE_SIN_LEN, 1,
	[Define if sockaddr_in has sin_len])],
  [AC_MSG_RESULT([no])]
)

AC_MSG_CHECKING([for socklen_t])
AC_TRY_COMPILE([
 #include <sys/types.h>
 #include <sys/socket.h>],
  [socklen_t x;],
  AC_MSG_RESULT([yes]),
  [AC_MSG_RESULT([no])
  AC_DEFINE(socklen_t, unsigned int,
	[Define to unsigned int if you dont have it])]
)

AC_MSG_CHECKING([whether our compiler supports __func__])
AC_TRY_COMPILE([],
 [void foo() { const char *cp = __func__; }],
 AC_MSG_RESULT([yes]),
 AC_MSG_RESULT([no])
 AC_MSG_CHECKING([whether our compiler supports __FUNCTION__])
 AC_TRY_COMPILE([],
   [void foo() { const char *cp = __FUNCTION__; }],
   AC_MSG_RESULT([yes])
   AC_DEFINE(__func__, __FUNCTION__,
         [Define to appropriate substitue if compiler doesnt have __func__]),
   AC_MSG_RESULT([no])
   AC_DEFINE(__func__, __FILE__,
         [Define to appropriate substitue if compiler doesnt have __func__])))

AC_OUTPUT(Makefile)
